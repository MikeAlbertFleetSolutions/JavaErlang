4/3 -- 2015:

If you are using Javassist to create new classes which should be callable
from Erlang, the library now supports "importing" such classes
using java:acquire_class(Node,ClassRef) where ClassRef is the
Class object corresponding to the newly created class. Using this mechanism
the new class becomes callable using its name, e.g., 
java:new(Node,'MyNewJavaAssistClass',[]).

The library now also supports adding additional parameters to the Java
interpreter in the java_options option, e.g., if for some reason 
the Hotspot compiler should not be run, the option
{java_options,["-Xint"]} disables it.

13/2 -- 2014:

JavaErlang now has support for implementing Java objects in Erlang
using the Javassist byte code manipulation library.
For details consult the new module "java_proxy" and the example
new example tests/swing_hello_world.erl.

11/2 -- 2014:

JavaErlang now has support for garbage collection of Java objects passed
to Erlang. This is (for now) disabled by default, to enable it use the
option {gc_enable,true} (an option to java:start_node/1).

Due to the support for garbage collection it is no longer safe to
check whether two Java object references in Erlang are equal using normal
Erlang term equality ("=="); the function java:eq/2 should be used instead.

Moreover, the implementation of garbage collection requires to use the NIF
(foreign function interface) of Erlang. Concretely a file C program
c/java_int_resource.c must be compiled and loaded. In case this creates
difficulties it is possible to simply comment out the line beginning
with "RESOURCE = ".
Yes, we should probably use a better build system. What this is, given
a mix of Erlang, Java and C code, and the requirement to have a system
usable on both Linux and Windows, I don't know.


21/11 -- 2012:

The code for generating an Erlang module corresponding to
a Java class has been removed in this version of the library.
Thus, Java objects can be created and accessed only
using the functions exported from the ``java'' module.

Java nodes can now be started on remote Erlang nodes --
see the options for the ``java:start_node/1'' function.


15/09 -- 2011: 
      First public release of the JavaErlang library.


      

      
