JAVA_ERLANG_VERSION = @PACKAGE_VERSION@
JINTERFACE_LIB_DIR = @ERLANG_LIB_DIR_jinterface@

# Try to determine the location of the Java compiler if JAVA_HOME is not set
ifeq ($(JAVA_HOME),)
	JAVA_HOME=$(shell readlink -f /usr/bin/javac | sed "s:bin/javac::")
endif

OTPERLANG=$(JINTERFACE_LIB_DIR)/priv/OtpErlang.jar

SOURCES = $(notdir $(wildcard src/*.erl))
JAVASOURCES = $(wildcard java/javaErlang/*.java)
TESTSOURCES = $(notdir $(wildcard tests/*.erl))
BEAMS = $(patsubst %.erl,ebin/%.beam,$(SOURCES))
HTMLS = $(patsubst %.erl,doc/%.html,$(SOURCES))

EFLAGS = +debug_info -D JAVA_ERLANG_VERSION=\"$(JAVA_ERLANG_VERSION)\"
# For debugging
# EFLAGS = +debug_info -Ddebug -D JAVA_ERLANG_VERSION=\"$(JAVA_ERLANG_VERSION)\"

JAR = JavaErlang.jar
CLASSES = classes/javaErlang/JavaErlang.class classes/javaErlang/testing/Test.class classes/javaErlang/testing/Test2.class 
DOCDIR=doc

tool: ebin classes $(JAR) $(BEAMS)
eqcjavademo: ebin/hashset_test.beam

qctest: ebin/hashset_test.ebin

ebin/hashset_test.beam: tests/hashset_test.erl
	erlc $(EFLAGS) -o ebin tests/hashset_test.erl

$(JAR): $(CLASSES)
	jar cf JavaErlang.jar -C classes javaErlang

ebin/%.beam: src/%.erl
	erlc $(EFLAGS) -o ebin $<

classes/javaErlang/JavaErlang.class: $(JAVASOURCES)
	$(JAVA_HOME)/bin/javac -d classes -cp $(OTPERLANG) $(JAVASOURCES)

classes/javaErlang/testing/Test.class: java/javaErlang/testing/Test.java
	$(JAVA_HOME)/bin/javac -d classes java/javaErlang/testing/Test.java

classes/javaErlang/testing/Test2.class: java/javaErlang/testing/Test2.java
	$(JAVA_HOME)/bin/javac -d classes java/javaErlang/testing/Test2.java

ebin:
	mkdir -p ebin

classes:
	mkdir -p classes

clean:
	rm -rf ebin/* classes/* Makefile doc/doc

dialyzer: 
	dialyzer ebin/*beam

docs:
	make edoc

edoc: 
	mkdir -p doc/doc
	cp doc/overview.edoc doc/doc
	erl -noshell -run edoc_run files '["src/java.erl"]' '[{sort_functions,false},{dir,"doc/doc"}]'

$(DOCDIR)/%.html: %.erl
	erl -noshell -run edoc_run file '"$<"' '[{sort_functions,false},{dir,"$(DOCDIR)"}]'

release: tool docs
	@ scripts/mkrelease "." release $(JAVA_ERLANG_VERSION)

release_nobuild:
	@ scripts/mkrelease "." release $(JAVA_ERLANG_VERSION)

publish:
	make release
	(cd release; zip -r java_erlang-$(JAVA_ERLANG_VERSION).zip "java_erlang_version_$(JAVA_ERLANG_VERSION)")

install: release
	echo "Installing java_erlang-$(JAVA_ERLANG_VERSION) into $(ERLANG_INSTALL_LIB_DIR)"
	cp -r release/mcerlang-$(JAVA_ERLANG_VERSION) $(ERLANG_INSTALL_LIB_DIR)



